name: build

run-name: ${{ github.ref_name }}-${{ github.run_number }}

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  diff:
    concurrency:
      group: diff-${{ github.ref_name }}
    runs-on: 'ubuntu-latest'
    env:
      TF_IN_AUTOMATION: true

    if: (github.event_name != 'workflow_dispatch'
      || (github.event_name == 'workflow_dispatch' && !startsWith(github.ref, 'refs/tags/')))
      && (github.ref != 'refs/heads/main' || (github.ref == 'refs/heads/main' && github.run_attempt == 1))
    steps:
      - name: Generate token
        id: generate_token
        uses: tibdex/github-app-token@v1.8.0
        with:
          app_id: ${{ secrets.PROGRAMEH_BOT_ID }}
          private_key: ${{ secrets.PROGRAMEH_BOT_PRIVATE_ACCESS_KEY }}

      - name: Checkout
        uses: actions/checkout@v3

      - name: setup terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: terraform init
        id: init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: terraform plan -refresh=true -no-color -detailed-exitcode
        continue-on-error: true

      - uses: actions/github-script@v2
        if: github.event_name == 'pull_request'
        env:
          PLAN: "${{ steps.plan.outputs.stderr }}\n${{ steps.plan.outputs.stdout }}"
        with:
           github-token: ${{ steps.generate_token.outputs.token }}
           script: |
             const output = `#### Terraform Plan \`${{ steps.plan.outcome }}\`
              
             <details><summary>Show Validate Output</summary>
              
              \`\`\`${process.env.PLAN}\`\`\`
              
              </details>
              
              *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

              github.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
      - name: Create Draft Release
        if: github.ref == 'refs/heads/main'
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        with:
          tag_name: ${{ github.ref_name }}.${{ github.run_number }}
          release_name: ${{ github.ref_name }}.${{ github.run_number }}
          draft: true
          prerelease: false
        
      - name: Delete older drafted releases
        if: github.ref == 'refs/heads/main'
        uses: sgpublic/delete-release-action@v1.1
        with:
          draft-drop: true
          draft-drop-count: 0
        env:
            GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
      - name: Publish Release link
        if: github.ref == 'refs/heads/main'
        run: echo "You can publish release from here - ${{ steps.create_release.outputs.html_url }}"

